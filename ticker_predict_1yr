# You need these imports for the graphs and data
import yfinance as yf
import pandas as pd
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import numpy as np
from sklearn.linear_model import LinearRegression

# Fetch historical data for whatver ticker you prefer, (change the ticker for the one you want) with 1-hour intervals
ticker = 'FFIE'
data = yf.download(ticker, period='1mo', interval='1h')

# Print the head of the data to ensure it is being fetched correctly
print(data.head())

# Calculate Moving Averages for trend lines
data['MA20'] = data['Close'].rolling(window=20).mean()
data['MA50'] = data['Close'].rolling(window=50).mean()

# Print the head of the data to ensure moving averages are calculated correctly
print(data[['MA20', 'MA50']].head(30))

# Function to identify potential entry points
def identify_entry_points(data):
    long_entries = []
    short_entries = []
    
    for i in range(1, len(data)):
        # Identify long entry points (buy) when MA20 crosses above MA50
        if data['MA20'][i] > data['MA50'][i] and data['MA20'][i-1] <= data['MA50'][i-1]:
            long_entries.append((data.index[i], data['Close'][i]))
        
        # Identify short entry points (sell) when MA20 crosses below MA50
        elif data['MA20'][i] < data['MA50'][i] and data['MA20'][i-1] >= data['MA50'][i-1]:
            short_entries.append((data.index[i], data['Close'][i]))
    
    return long_entries, short_entries

# Identify entry points (this is just for me to find better entry points using averages)
long_entries, short_entries = identify_entry_points(data)

# Print the identified long and short entries
print("Long Entries:", long_entries)
print("Short Entries:", short_entries)

# Prepare data for linear regression
data['Date'] = data.index
data['Timestamp'] = data['Date'].apply(lambda x: x.timestamp())
X = data['Timestamp'].values.reshape(-1, 1)
y = data['Close'].values

# Train linear regression model
model = LinearRegression()
model.fit(X, y)

# Predict the trend for the next year (approximately 252 trading days)
future_timestamps = np.arange(data['Timestamp'].max(), data['Timestamp'].max() + 252 * 24 * 3600, 24 * 3600).reshape(-1, 1)
future_dates = pd.to_datetime(future_timestamps.reshape(-1), unit='s')
future_predictions = model.predict(future_timestamps)

# Plotting the data
fig = make_subplots(rows=1, cols=1, shared_xaxes=True)

# candlestick chart
fig.add_trace(go.Candlestick(x=data.index,
                             open=data['Open'],
                             high=data['High'],
                             low=data['Low'],
                             close=data['Close'],
                             name='Candlesticks'))

# Moving Averages
fig.add_trace(go.Scatter(x=data.index, y=data['MA20'], mode='lines', name='MA20'))
fig.add_trace(go.Scatter(x=data.index, y=data['MA50'], mode='lines', name='MA50'))

# Long Entry Points
for entry in long_entries:
    fig.add_trace(go.Scatter(x=[entry[0]], y=[entry[1]], mode='markers', marker=dict(color='green', size=10), name='Long Entry'))

# Short Entry Points
for entry in short_entries:
    fig.add_trace(go.Scatter(x=[entry[0]], y=[entry[1]], mode='markers', marker=dict(color='red', size=10), name='Short Entry'))

# Future Predictions
fig.add_trace(go.Scatter(x=future_dates, y=future_predictions, mode='lines', name='Future Trend'))

# Update layout
fig.update_layout(title=f'{ticker} 1-Hour Candlestick Chart with Trend Lines and Future Predictions',
                  xaxis_title='Date',
                  yaxis_title='Price (USD)',
                  xaxis_rangeslider_visible=False)

# Show the plot
fig.show()
